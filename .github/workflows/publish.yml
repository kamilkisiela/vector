name: Publish

on:
  workflow_call:
    inputs:
      git_ref:
        type: string
        required: true
        # channel is the dir/namespace packages are organized into.
        # Options are release/nightly/custom.
      channel:
        type: string
        required: true

env:
  VERBOSE: true
  CI: true
  DISABLE_MOLD: true
  DEBIAN_FRONTEND: noninteractive
  CONTAINER_TOOL: docker
  CARGO_PROFILE_RELEASE_LTO: fat
  CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
  # observing issues fetching boringssl via HTTPS in the OSX build, seeing if this helps
  # can be removed when we switch back to the upstream openssl-sys crate
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  CHANNEL: ${{ inputs.channel }}

jobs:
  generate-publish-metadata:
    name: Generate Publish-related Metadata
    runs-on: ubuntu-latest
    outputs:
      vector_version: ${{ steps.generate-publish-metadata.outputs.vector_version }}
      vector_build_desc: ${{ steps.generate-publish-metadata.outputs.vector_build_desc }}
      vector_release_channel: ${{ steps.generate-publish-metadata.outputs.vector_release_channel }}
      vector_cloudsmith_repo: ${{ steps.generate-publish-metadata.outputs.vector_cloudsmith_repo }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Generate publish metadata
        id: generate-publish-metadata
        run: make ci-generate-publish-metadata

  build-x86_64-unknown-linux-musl-packages:
    name: Build Vector for x86_64-unknown-linux-musl (.tar.gz)
    runs-on: ubuntu-latest
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        run: make package-x86_64-unknown-linux-musl-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts/vector*

  build-x86_64-unknown-linux-gnu-packages:
    name: Build Vector for x86_64-unknown-linux-gnu (.tar.gz, DEB, RPM)
    runs-on: ubuntu-latest
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        run: make package-x86_64-unknown-linux-gnu-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts/vector*

  build-aarch64-unknown-linux-musl-packages:
    name: Build Vector for aarch64-unknown-linux-musl (.tar.gz)
    runs-on: ubuntu-latest
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-aarch64-unknown-linux-musl-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl
          path: target/artifacts/vector*

  build-aarch64-unknown-linux-gnu-packages:
    name: Build Vector for aarch64-unknown-linux-gnu (.tar.gz)
    runs-on: ubuntu-latest
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-aarch64-unknown-linux-gnu-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu
          path: target/artifacts/vector*

  build-armv7-unknown-linux-gnueabihf-packages:
    name: Build Vector for armv7-unknown-linux-gnueabihf (.tar.gz)
    runs-on: ubuntu-latest
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-armv7-unknown-linux-gnueabihf-all
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf
          path: target/artifacts/vector*

  build-armv7-unknown-linux-musleabihf-packages:
    name: Build Vector for armv7-unknown-linux-musleabihf (.tar.gz)
    runs-on: ubuntu-latest
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Ubuntu-specific)
        run: sudo -E bash scripts/environment/bootstrap-ubuntu-20.04.sh
      - name: Bootstrap runner environment (generic)
        run: bash scripts/environment/prepare.sh
      - name: Build Vector
        env:
          DOCKER_PRIVILEGED: "true"
        run: make package-armv7-unknown-linux-musleabihf
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf
          path: target/artifacts/vector*

  build-x86_64-apple-darwin-packages:
    name: Build Vector for x86_64-apple-darwin (.tar.gz)
    runs-on: macos-latest
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (macOS-specific)
        run: bash scripts/environment/bootstrap-macos-10.sh
      - name: Build Vector
        env:
          TARGET: "x86_64-apple-darwin"
          NATIVE_BUILD: true
        run: |
          export PATH="$HOME/.cargo/bin:$PATH"
          make package
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-apple-darwin
          path: target/artifacts/vector*

  build-x86_64-pc-windows-msvc-packages:
    name: Build Vector for x86_64-pc-windows-msvc (.zip)
    runs-on: windows-latest
    needs: generate-publish-metadata
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
      RUSTFLAGS: "-D warnings -Ctarget-feature=+crt-static"
      RELEASE_BUILDER: "true"
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Bootstrap runner environment (Windows-specific)
        run: .\scripts\environment\bootstrap-windows-2019.ps1
      - name: Install Wix
        shell: bash
        run: |
          mkdir -p /c/wix
          cd /c/wix
          curl -sSfL https://github.com/wixtoolset/wix3/releases/download/wix3112rtm/wix311-binaries.zip > wix-binaries.zip
          unzip -o wix-binaries.zip
          rm wix-binaries.zip
      - name: Build Vector
        shell: bash
        run: |
          export FEATURES="default-msvc"
          export ARCHIVE_TYPE="zip"
          export KEEP_SYMBOLS="true"
          export RUST_LTO=""
          export TARGET="x86_64-pc-windows-msvc"
          export NATIVE_BUILD="true"
          make package
      - name: Build MSI package
        shell: bash
        run: |
          export PATH="/c/wix:$PATH"
          ./scripts/package-msi.sh
      - name: Stage package artifacts for publish
        uses: actions/upload-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-pc-windows-msvc
          path: target/artifacts/vector*

  deb-verify:
    name: Verify DEB Packages
    runs-on: ubuntu-latest
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    strategy:
      matrix:
        container:
          - ubuntu:16.04
          - ubuntu:18.04
          - ubuntu:20.04
          - ubuntu:22.04
          - ubuntu:22.10
          - ubuntu:23.04
          - debian:10
          - debian:11
    container:
      image: ${{ matrix.container }}
    steps:
      - run: |
          apt-get update && \
          apt-get install -y \
          ca-certificates \
          curl \
          git \
          systemd \
          make
      - name: Fix Git safe directories issue when in containers (actions/checkout#760)
        run: git config --global --add safe.directory /__w/vector/vector
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: First install of DEB package.
        run: |
          dpkg -i target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_amd64.deb
          ./scripts/verify-install.sh
      - name: Second install of DEB package.
        run: |
          dpkg -i target/artifacts/vector_${{ env.VECTOR_VERSION }}-1_amd64.deb
          ./scripts/verify-install.sh

  rpm-verify:
    name: Verify RPM Packages
    runs-on: ubuntu-latest
    needs:
      - generate-publish-metadata
      - build-x86_64-unknown-linux-gnu-packages
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
    strategy:
      matrix:
        container:
          - "quay.io/centos/centos:stream8"
          - "quay.io/centos/centos:stream9"
          - "amazonlinux:1"
          - "amazonlinux:2"
          - "fedora:34"
          - "fedora:35"
          - "fedora:36"
          - "fedora:37"
          - "fedora:38"
    container:
      image: ${{ matrix.container }}
    steps:
      - run: |
          yum update -y
          yum install -y \
          ca-certificates \
          git \
          systemd \
          tar \
          make
          # conflicts with curl-minimal on some distros and --allowerased is not
          # supported on some distros
          if ! command -v curl &> /dev/null ; then
            yum install -y curl
          fi
      - name: Fix Git safe directories issue when in containers (actions/checkout#760)
        run: git config --global --add safe.directory /__w/vector/vector
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: First install of RPM package.
        run: |
          rpm -i --replacepkgs target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm
          ./scripts/verify-install.sh
      - name: Second install of RPM package.
        run: |
          rpm -i --replacepkgs target/artifacts/vector-${{ env.VECTOR_VERSION }}-1.x86_64.rpm
          ./scripts/verify-install.sh

  publish-docker:
    name: Publish to Docker
    runs-on: ubuntu-latest
    needs:
      - generate-publish-metadata
      - build-aarch64-unknown-linux-gnu-packages
      - build-aarch64-unknown-linux-musl-packages
      - build-x86_64-unknown-linux-gnu-packages
      - build-x86_64-unknown-linux-musl-packages
      - build-armv7-unknown-linux-musleabihf-packages
      - build-armv7-unknown-linux-gnueabihf-packages
      - deb-verify
    env:
      VECTOR_VERSION: ${{ needs.generate-publish-metadata.outputs.vector_version }}
      VECTOR_BUILD_DESC: ${{ needs.generate-publish-metadata.outputs.vector_build_desc }}
      CHANNEL: ${{ needs.generate-publish-metadata.outputs.vector_release_channel }}
    steps:
      - name: Checkout Vector
        uses: actions/checkout@v3
        with:
          ref: ${{ inputs.git_ref }}
      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.2.0
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.8.0
        with:
          version: latest
          install: true
      - name: Download staged package artifacts (aarch64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (aarch64-unknown-linux-musl)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-aarch64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-gnu)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-gnu
          path: target/artifacts
      - name: Download staged package artifacts (x86_64-unknown-linux-musl)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-x86_64-unknown-linux-musl
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-gnueabihf)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-gnueabihf
          path: target/artifacts
      - name: Download staged package artifacts (armv7-unknown-linux-musleabihf)
        uses: actions/download-artifact@v3
        with:
          name: vector-${{ env.VECTOR_VERSION }}-armv7-unknown-linux-musleabihf
          path: target/artifacts
      - name: Build and publish Docker images
        env:
          PLATFORM: "linux/amd64,linux/arm64,linux/arm/v7"
          REPO: ghcr.io/kamilkisiela/vector
        run: |
          make release-docker

